import os
import numpy as np
import pandas as pd


here = os.path.dirname(__file__)


## Merge metadata from various places
# Load OpenCell localization annotation
# Downloaded from https://opencell.czbiohub.org/download "Processed datasets > Protein localization annotations" section
meta_open_upstream_loc = pd.read_csv(os.path.join(here, "opencell-localization-annotations.csv"))

# Load metadata generated by our workflow
meta_open = pd.read_csv("opencell.metadata.csv")

# Parse out gene name and Ensembl ID from file names
meta_open[["gene_name", "ensembl_id", "fov-id"]] = meta_open["image"].str.split("_", expand = True)[[1, 2, 4]]

# Join by gene names. 
# Some genes have > 1 Ensembl IDs that were used in different metadata so don't join by Ensembl IDs.
meta_open = meta_open.merge(meta_open_upstream_loc, how="left", left_on="gene_name", right_on="target_name")


## Sanity check
# Check all protein locations are filled
# There are 106 images for HSP90B1 which has no location annotations.
no_loc = meta_open[meta_open["annotations_grade_3"].isna() & meta_open["annotations_grade_2"].isna() & meta_open["annotations_grade_1"].isna()]
print(f"Number of images with no localization annotation: {len(no_loc)}")



## Construct the output metadata table
meta_open_final = pd.DataFrame({
    "top": meta_open["resz_center_y"] - 640/2,
    "left": meta_open["resz_center_x"] - 640/2,
    "width": 640,
    "height": 640,
    "id": meta_open["image"].str.replace("proj.tif","") + meta_open["cell_id"].astype(str),
    "location": meta_open["annotations_grade_3"],
    "location_code": np.nan,
    "locations": meta_open["annotations_grade_3"],
    "gene_names": meta_open["gene_name"],
    "ensembl_ids": meta_open["ensembl_id"],
    "atlas_name": "HEK293T",
    "ImageWidth": meta_open["resz_img_width"],
    "ImageHeight": meta_open["resz_img_height"],
    "target": np.nan,
    "image_id": meta_open["fov-id"],
    "cell_id": meta_open["cell_id"],
    "nucleus_area": meta_open["resz_nuc_area"],
    "cell_area": np.nan,
    "resized_image_name": meta_open["resz_image"],
})


meta_open_final.to_csv("opencell.metadata.formatted.csv", index=False)
